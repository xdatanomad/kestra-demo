volumes:
  postgres-data:
    driver: local
  kestra-data:
    driver: local

services:
  postgres:
    image: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    # image: kestra/kestra:latest
    image: registry.kestra.io/docker/kestra-ee:v1.0
    pull_policy: always
    # Note that this setup with a root user is intended for development purpose.
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    user: "root"
    command: server standalone
    volumes:
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4
        kestra:
          secret:
            type: jdbc
            jdbc:
              secret: gPpf2YpjBA^7f64uwNkjMLeCmEfWJztX4&XexSjBekHLg#n88yXTrKkapNrnBLnx
          encryption:
            secret-key: tP5Xner^92PrSH2fSk#WpGV!3Qz!sTFL6*VjbcRnnyv$UNe@xbQa&#kLygN5nExw
          server:
            basicAuth:
              enabled: false
              username: pparvizi@kestra.io
              password: Qwerty1234
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
          ai:
            type: "gemini"
            gemini:
              api-key: "AIzaSyBYlu9hoyOudKkXVnXDhpWYHJhkEaFfF4Q"
              model-name: gemini-2.5-flash
          anonymousUsageReport:
            enabled: false
          ee:
            tenants:
              enabled: true
            license:
              fingerprint: ${KESTRA_EE_LICENSE_FINGERPRINT}
              id: ${KESTRA_EE_LICENSE_ID}
              key: ${KESTRA_EE_LICENSE_KEY}
    ports:
      - "18080:8080"
      - "18081:8081"
    depends_on:
      postgres:
        condition: service_started
